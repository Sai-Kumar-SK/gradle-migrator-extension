name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test

    - name: Compile TypeScript
      run: npm run compile

    - name: Install VSCE
      run: npm install -g @vscode/vsce

    - name: Package extension
      run: vsce package

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        # Extract changelog for this version
        awk '/^## \[${{ steps.get_version.outputs.VERSION }}\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md > release_notes.md
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.get_version.outputs.VERSION }}
        body: ${{ steps.changelog.outputs.CHANGELOG }}
        draft: false
        prerelease: false

    - name: Upload VSIX to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./gradle-migrator-${{ steps.get_version.outputs.VERSION }}.vsix
        asset_name: gradle-migrator-${{ steps.get_version.outputs.VERSION }}.vsix
        asset_content_type: application/zip

    - name: Publish to VS Code Marketplace
      env:
        VSCE_PAT: ${{ secrets.VSCE_PAT }}
      run: |
        if [ -n "$VSCE_PAT" ]; then
          vsce publish -p $VSCE_PAT
        else
          echo "VSCE_PAT not set, skipping marketplace publish"
        fi

    - name: Publish to Open VSX Registry
      env:
        OVSX_PAT: ${{ secrets.OVSX_PAT }}
      run: |
        if [ -n "$OVSX_PAT" ]; then
          npx ovsx publish -p $OVSX_PAT
        else
          echo "OVSX_PAT not set, skipping Open VSX publish"
        fi

  notify:
    runs-on: ubuntu-latest
    needs: release
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.release.result == 'success'
      run: |
        echo "✅ Release ${{ github.ref }} published successfully!"
        # Add notification logic here (Slack, Discord, etc.)
    
    - name: Notify on failure
      if: needs.release.result == 'failure'
      run: |
        echo "❌ Release ${{ github.ref }} failed!"
        # Add notification logic here (Slack, Discord, etc.)